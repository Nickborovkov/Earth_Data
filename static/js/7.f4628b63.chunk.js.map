{"version":3,"sources":["components/earthImage/earthImage.module.css","components/earthImage/datePicker/setDateEarthImage.jsx","helpers/earthImageURLHelper.js","components/earthImage/earthImage.jsx"],"names":["module","exports","SetDateEarthImage","dispatch","useDispatch","validationSchema","yup","shape","selectedDate","required","initialValues","validateOnBlur","onSubmit","values","resetForm","setEarthImageDate","touched","errors","handleSubmit","handleBlur","handleChange","isValid","dirty","type","name","value","onBlur","onChange","disabled","onClick","earthImageUrlHelper","date","item","dateArray","split","splitedDate","year","month","EarthImage","earthImage","useSelector","state","SelectedDate","searchStart","library","useEffect","getEarthImage","to","className","s","title","imagesArray","map","e","imagesItem","imageDate","params","centroid_coordinates","lat","lon","imageHolder","image","src","alt","identifier"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,WAAa,+BAA+B,MAAQ,0BAA0B,YAAc,gCAAgC,MAAQ,0BAA0B,UAAY,8BAA8B,OAAS,2BAA2B,YAAc,gCAAgC,WAAa,iC,oHC+C1SC,EA1CW,WAEtB,IAAMC,EAAWC,cACXC,EAAmBC,MAAaC,MAAM,CACxCC,aAAcF,MAAaG,SAAb,uBAGlB,OACI,8BACI,cAAC,IAAD,CACIC,cAAe,CACXF,aAAa,IAEjBG,gBAAc,EACdC,SAAW,SAACC,EAAD,GAA0B,IAAhBC,EAAe,EAAfA,UACjBX,EAASY,YAAkBF,EAAOL,eAClCM,EAAU,CAACD,OAAO,MAEtBR,iBAAkBA,EATtB,SAWM,gBAAEQ,EAAF,EAAEA,OAAQG,EAAV,EAAUA,QAASC,EAAnB,EAAmBA,OAAQC,EAA3B,EAA2BA,aAAcC,EAAzC,EAAyCA,WAAYC,EAArD,EAAqDA,aAAcC,EAAnE,EAAmEA,QAASC,EAA5E,EAA4EA,MAA5E,OACE,gCACI,qDACA,gCACKN,EAAQR,cAAgBS,EAAOT,cAChC,8BAAMS,EAAOT,eACb,uBAAOe,KAAK,OACLC,KAAK,eACLC,MAAOZ,EAAOL,aACdkB,OAAQP,EACRQ,SAAUP,OAErB,wBAAQQ,UAAWP,IAAYC,EACvBO,QAASX,EACTK,KAAK,SAFb,2BCtCXO,EAAsB,SAACC,EAAMC,GACtC,IACMC,EAAYF,EAAKG,MAAL,KACZC,EAAc,CAChBC,KAAMH,EAAU,GAChBI,MAAOJ,EAAU,GACjBF,KAAME,EAAU,IAEpB,MAAM,6CAAN,OAAoDE,EAAYC,KAAhE,YAAwED,EAAYE,MAApF,YAA6FF,EAAYJ,KAAzG,gBAAqHC,EAArH,wBAPY,6C,OCgDDM,UAxCI,WAEf,IAAMnC,EAAWC,cACXmC,EAAaC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,WAAWA,cACnDG,EAAeF,aAAY,SAAAC,GAAK,OAAIA,EAAMF,WAAWR,QACrDY,EAAcH,aAAY,SAAAC,GAAK,OAAIA,EAAMG,QAAQD,eAQvD,OANAE,qBAAU,WACN1C,EAAS2C,YAAcJ,MACxB,CAACvC,EAAUuC,IAIVH,EAEDI,EAAoB,cAAC,IAAD,CAAUI,GAAG,iBAGhC,sBAAKC,UAAWC,IAAEV,WAAlB,UACI,oBAAIS,UAAWC,IAAEC,MAAjB,yCACA,cAAC,EAAD,IACA,qBAAKF,UAAWC,IAAEE,YAAlB,SAEYZ,EAAWa,KAAI,SAAAC,GAAC,OAAI,sBAAwBL,UAAWC,IAAEK,WAArC,UAChB,gCACI,qBAAIN,UAAWC,IAAEM,UAAjB,mBAAmCF,EAAEtB,QACrC,oBAAGiB,UAAWC,IAAEO,OAAhB,uBAAmCH,EAAEI,qBAAqBC,OAC1D,oBAAGV,UAAWC,IAAEO,OAAhB,wBAAoCH,EAAEI,qBAAqBE,UAE/D,qBAAKX,UAAWC,IAAEW,YAAlB,SACI,qBAAKZ,UAAWC,IAAEY,MAAOC,IAAKhC,EAAoBY,EAAcW,EAAEQ,OAC7DE,IAAI,0CARaV,EAAEW,oBAV7B,cAAC,IAAD","file":"static/js/7.f4628b63.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"earthImage\":\"earthImage_earthImage__2B6Gm\",\"title\":\"earthImage_title__s1gF6\",\"imageHolder\":\"earthImage_imageHolder__2wgAg\",\"image\":\"earthImage_image__1WqjJ\",\"imageDate\":\"earthImage_imageDate__1MAqV\",\"params\":\"earthImage_params__1psJY\",\"imagesArray\":\"earthImage_imagesArray__1t5vk\",\"imagesItem\":\"earthImage_imagesItem__1PkDx\"};","import React from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport * as yup from 'yup'\r\nimport {Formik} from \"formik\";\r\nimport {setEarthImageDate} from \"../../../reducers/earthImage\";\r\n\r\nconst SetDateEarthImage = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const validationSchema = yup.object().shape({\r\n        selectedDate: yup.string().required(`Field is required`)\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{\r\n                    selectedDate: ``\r\n                }}\r\n                validateOnBlur\r\n                onSubmit={ (values, {resetForm}) => {\r\n                    dispatch(setEarthImageDate(values.selectedDate))\r\n                    resetForm({values: ``})\r\n                } }\r\n                validationSchema={validationSchema}\r\n            >\r\n                { ({values, touched, errors, handleSubmit, handleBlur, handleChange, isValid, dirty}) => (\r\n                    <div>\r\n                        <h3>Select date to show</h3>\r\n                        <div>\r\n                            {touched.selectedDate && errors.selectedDate &&\r\n                            <div>{errors.selectedDate}</div>}\r\n                            <input type=\"date\"\r\n                                   name='selectedDate'\r\n                                   value={values.selectedDate}\r\n                                   onBlur={handleBlur}\r\n                                   onChange={handleChange}/>\r\n                        </div>\r\n                        <button disabled={!isValid && !dirty}\r\n                                onClick={handleSubmit}\r\n                                type='submit'>Show</button>\r\n                    </div>\r\n                ) }\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SetDateEarthImage","export const earthImageUrlHelper = (date, item) => {\r\n    const apiKey = `ZWGiTATMzPHjpsUJSj289aerwaSsLpikIiYBhaek`\r\n    const dateArray = date.split(`-`)\r\n    const splitedDate = {\r\n        year: dateArray[0],\r\n        month: dateArray[1],\r\n        date: dateArray[2],\r\n    }\r\n    return `https://api.nasa.gov/EPIC/archive/natural/${splitedDate.year}/${splitedDate.month}/${splitedDate.date}/png/${item}.png?api_key=${apiKey}`\r\n}","import React, {useEffect} from \"react\";\r\nimport s from './earthImage.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getEarthImage} from \"../../reducers/earthImage\";\r\nimport Preloader from \"../../helpers/preloaders/preloader\";\r\nimport SetDateEarthImage from \"./datePicker/setDateEarthImage\";\r\nimport {earthImageUrlHelper} from \"../../helpers/earthImageURLHelper\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst EarthImage = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const earthImage = useSelector(state => state.earthImage.earthImage)\r\n    const SelectedDate = useSelector(state => state.earthImage.date)\r\n    const searchStart = useSelector(state => state.library.searchStart)\r\n\r\n    useEffect(() => {\r\n        dispatch(getEarthImage(SelectedDate))\r\n    }, [dispatch, SelectedDate])\r\n\r\n\r\n\r\n    if(!earthImage) return <Preloader />\r\n\r\n    if(searchStart) return <Redirect to='/nasaLibrary'/>\r\n\r\n    return (\r\n        <div className={s.earthImage}>\r\n            <h2 className={s.title}>See Earth Photos from space</h2>\r\n            <SetDateEarthImage />\r\n            <div className={s.imagesArray}>\r\n                    {\r\n                        earthImage.map(e => <div key={e.identifier} className={s.imagesItem}>\r\n                            <div>\r\n                                <h3 className={s.imageDate}>Date: {e.date}</h3>\r\n                                <p className={s.params}>Latitude: {e.centroid_coordinates.lat}</p>\r\n                                <p className={s.params}>Longitude: {e.centroid_coordinates.lon}</p>\r\n                            </div>\r\n                            <div className={s.imageHolder}>\r\n                                <img className={s.image} src={earthImageUrlHelper(SelectedDate, e.image)}\r\n                                     alt=\"Not available, please change date\"/>\r\n                            </div>\r\n                        </div>)\r\n                    }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EarthImage"],"sourceRoot":""}