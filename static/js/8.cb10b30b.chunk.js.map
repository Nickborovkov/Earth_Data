{"version":3,"sources":["components/earth/earth.module.css","components/earth/parametersPicker/parametersPicker.jsx","components/earth/earth.jsx"],"names":["module","exports","ParametersPicker","dispatch","useDispatch","validationSchema","yup","shape","longitude","required","latitude","date","dimensions","initialValues","validateOnBlur","onSubmit","values","resetForm","setParameters","errors","touched","handleSubmit","handleChange","handleBlur","isValid","dirty","type","name","value","onChange","onBlur","placeholder","disabled","onClick","Earth","earthObs","useSelector","state","earth","earthObservation","searchStart","library","useEffect","getEarthObservation","to","className","s","title","earthParams","id","imageHolder","image","src","url","alt"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,YAAc,2BAA2B,MAAQ,qBAAqB,YAAc,6B,oHCoFjJC,EA/EU,WAErB,IAAMC,EAAWC,cAEXC,EAAmBC,MAAaC,MAAM,CACxCC,UAAWF,MAAaG,SAAb,qBACXC,SAAUJ,MAAaG,SAAb,qBACVE,KAAML,MAAaG,SAAb,qBACNG,WAAYN,MAAaG,SAAb,uBAGhB,OACI,8BACI,cAAC,IAAD,CACII,cAAe,CACXL,UAAU,GACVE,SAAS,GACTC,KAAK,GACLC,WAAW,IAEfE,gBAAc,EACdC,SAAW,SAACC,EAAD,GAA0B,IAAhBC,EAAe,EAAfA,UACjBd,EAASe,YAAcF,EAAOR,UAAWQ,EAAON,SAAUM,EAAOL,KAAMK,EAAOJ,aAC9EK,EAAU,CAACD,OAAO,MAEtBX,iBAAkBA,EAZtB,SAcM,gBAAEW,EAAF,EAAEA,OAAQG,EAAV,EAAUA,OAAQC,EAAlB,EAAkBA,QAASC,EAA3B,EAA2BA,aAAcC,EAAzC,EAAyCA,aAAcC,EAAvD,EAAuDA,WAAYC,EAAnE,EAAmEA,QAASC,EAA5E,EAA4EA,MAA5E,OACE,gCACI,uDACA,gCACKL,EAAQZ,WAAaW,EAAOX,WAC7B,8BAAMW,EAAOX,YACb,uBAAOkB,KAAK,OACLC,KAAK,YACLC,MAAOZ,EAAOR,UACdqB,SAAUP,EACVQ,OAAQP,EACRQ,YAAY,+BAEvB,gCACKX,EAAQV,UAAYS,EAAOT,UAC5B,8BAAMS,EAAOT,WACb,uBAAOgB,KAAK,OACLC,KAAK,WACLC,MAAOZ,EAAON,SACdmB,SAAUP,EACVQ,OAAQP,EACRQ,YAAY,8BAEvB,gCACKX,EAAQT,MAAQQ,EAAOR,MACxB,8BAAMQ,EAAOR,OACb,uBAAOe,KAAK,OACLC,KAAK,OACLC,MAAOZ,EAAOL,KACdkB,SAAUP,EACVQ,OAAQP,OAEnB,gCACKH,EAAQR,YAAcO,EAAOP,YAC9B,8BAAMO,EAAOP,aACb,uBAAOc,KAAK,OACLC,KAAK,aACLC,MAAOZ,EAAOJ,WACdiB,SAAUP,EACVQ,OAAQP,EACRQ,YAAY,qCAEvB,wBAAQC,UAAWR,IAAYC,EACvBQ,QAASZ,EACTK,KAAK,SAFb,2B,OCjCTQ,UAlCD,WAEV,IAAM/B,EAAWC,cACX+B,EAAWC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,oBAC5C/B,EAAY4B,aAAY,SAAAC,GAAK,OAAIA,EAAMC,MAAM9B,aAC7CE,EAAW0B,aAAY,SAAAC,GAAK,OAAIA,EAAMC,MAAM5B,YAC5CC,EAAOyB,aAAY,SAAAC,GAAK,OAAIA,EAAMC,MAAM3B,QACxCC,EAAawB,aAAY,SAAAC,GAAK,OAAIA,EAAMC,MAAM1B,cAC9C4B,EAAcJ,aAAY,SAAAC,GAAK,OAAIA,EAAMI,QAAQD,eAOvD,OAJAE,qBAAU,WACNvC,EAASwC,YAAoBnC,EAAWE,EAAUC,EAAMC,MAC1D,CAACT,EAAUK,EAAWE,EAAUC,EAAMC,IAEpCuB,EAGDK,EAAoB,cAAC,IAAD,CAAUI,GAAG,iBAGhC,sBAAKC,UAAWC,IAAER,MAAlB,UACI,oBAAIO,UAAWC,IAAEC,MAAjB,oCACA,cAAC,EAAD,IACA,oBAAGF,UAAWC,IAAEE,YAAhB,iBAAkCb,EAASc,MAC3C,oBAAGJ,UAAWC,IAAEE,YAAhB,mBAAoCb,EAASxB,QAC7C,qBAAKkC,UAAWC,IAAEI,YAAlB,SACI,qBAAKL,UAAWC,IAAEK,MAAOC,IAAKjB,EAASkB,IAAKC,IAAI,kBAZvC,cAAC,IAAD","file":"static/js/8.cb10b30b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"earth\":\"earth_earth__On9Vv\",\"title\":\"earth_title__lF0Uy\",\"imageHolder\":\"earth_imageHolder__34R1v\",\"image\":\"earth_image__22JL_\",\"earthParams\":\"earth_earthParams__329Ia\"};","import React from \"react\";\r\nimport {Formik} from \"formik\";\r\nimport * as yup from 'yup'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setParameters} from \"../../../reducers/earth\";\r\n\r\nconst ParametersPicker = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const validationSchema = yup.object().shape({\r\n        longitude: yup.number().required(`Field is required`),\r\n        latitude: yup.number().required(`Field is required`),\r\n        date: yup.string().required(`Field is required`),\r\n        dimensions: yup.number().required(`Field is required`),\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{\r\n                    longitude: ``,\r\n                    latitude: ``,\r\n                    date: ``,\r\n                    dimensions: ``\r\n                }}\r\n                validateOnBlur\r\n                onSubmit={ (values, {resetForm}) => {\r\n                    dispatch(setParameters(values.longitude, values.latitude ,values.date ,values.dimensions))\r\n                    resetForm({values: ``})\r\n                } }\r\n                validationSchema={validationSchema}\r\n            >\r\n                { ({values, errors, touched, handleSubmit, handleChange, handleBlur, isValid, dirty}) => (\r\n                    <div>\r\n                        <h3>Choose new parameters</h3>\r\n                        <div>\r\n                            {touched.longitude && errors.longitude &&\r\n                            <div>{errors.longitude}</div>}\r\n                            <input type=\"text\"\r\n                                   name='longitude'\r\n                                   value={values.longitude}\r\n                                   onChange={handleChange}\r\n                                   onBlur={handleBlur}\r\n                                   placeholder='Enter longitude here...'/>\r\n                        </div>\r\n                        <div>\r\n                            {touched.latitude && errors.latitude &&\r\n                            <div>{errors.latitude}</div>}\r\n                            <input type=\"text\"\r\n                                   name='latitude'\r\n                                   value={values.latitude}\r\n                                   onChange={handleChange}\r\n                                   onBlur={handleBlur}\r\n                                   placeholder='Enter latitude here...'/>\r\n                        </div>\r\n                        <div>\r\n                            {touched.date && errors.date &&\r\n                            <div>{errors.date}</div>}\r\n                            <input type=\"date\"\r\n                                   name='date'\r\n                                   value={values.date}\r\n                                   onChange={handleChange}\r\n                                   onBlur={handleBlur}/>\r\n                        </div>\r\n                        <div>\r\n                            {touched.dimensions && errors.dimensions &&\r\n                            <div>{errors.dimensions}</div>}\r\n                            <input type=\"text\"\r\n                                   name='dimensions'\r\n                                   value={values.dimensions}\r\n                                   onChange={handleChange}\r\n                                   onBlur={handleBlur}\r\n                                   placeholder='Enter size in degrees here...'/>\r\n                        </div>\r\n                        <button disabled={!isValid && !dirty}\r\n                                onClick={handleSubmit}\r\n                                type='submit'>Show</button>\r\n                    </div>\r\n                ) }\r\n            </Formik>\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default ParametersPicker","import React, {useEffect} from \"react\";\r\nimport s from './earth.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getEarthObservation} from \"../../reducers/earth\";\r\nimport Preloader from \"../../helpers/preloaders/preloader\";\r\nimport ParametersPicker from \"./parametersPicker/parametersPicker\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst Earth = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const earthObs = useSelector(state => state.earth.earthObservation)\r\n    const longitude = useSelector(state => state.earth.longitude)\r\n    const latitude = useSelector(state => state.earth.latitude)\r\n    const date = useSelector(state => state.earth.date)\r\n    const dimensions = useSelector(state => state.earth.dimensions)\r\n    const searchStart = useSelector(state => state.library.searchStart)\r\n\r\n\r\n    useEffect(()=>{\r\n        dispatch(getEarthObservation(longitude, latitude, date, dimensions))\r\n    },[dispatch, longitude, latitude, date, dimensions])\r\n\r\n    if(!earthObs) return <Preloader />\r\n\r\n\r\n    if(searchStart) return <Redirect to='/nasaLibrary'/>\r\n\r\n    return (\r\n        <div className={s.earth}>\r\n            <h2 className={s.title}>Earth Observation Data</h2>\r\n            <ParametersPicker />\r\n            <p className={s.earthParams}>ID: {earthObs.id}</p>\r\n            <p className={s.earthParams}>Date: {earthObs.date}</p>\r\n            <div className={s.imageHolder}>\r\n                <img className={s.image} src={earthObs.url} alt=\"earthObs\"/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Earth"],"sourceRoot":""}