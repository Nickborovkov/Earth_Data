{"version":3,"sources":["components/earthImage/earthImage.module.css","components/earthImage/datePicker/setDateEarthImage.jsx","helpers/earthImageURLHelper.js","components/earthImage/earthImage.jsx","helpers/formHelpers/formsStyles.module.css","helpers/formHelpers/formHelpers.jsx"],"names":["module","exports","SetDateEarthImage","dispatch","useDispatch","validationSchema","yup","shape","selectedDate","required","initialValues","validateOnBlur","onSubmit","values","resetForm","setEarthImageDate","touched","errors","handleSubmit","handleBlur","handleChange","isValid","dirty","className","s","form","title","inputsHolder","formInputHelper","formSubtitle","input","dateToday","formButtonHelper","formButton","earthImageUrlHelper","date","item","dateArray","split","splitedDate","year","month","EarthImage","earthImage","useSelector","state","SelectedDate","searchStart","library","useEffect","getEarthImage","to","imagesArray","map","e","imagesItem","imageDate","params","centroid_coordinates","lat","lon","imageHolder","image","src","alt","identifier","titleClass","inputClass","type","name","max","value","inputHolder","onChange","onBlur","buttonClass","text","disabled","onClick"],"mappings":"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","file":"static/js/6.ae59f6d9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"earthImage\":\"earthImage_earthImage__1bvLl\",\"title\":\"earthImage_title___hClR\",\"imageHolder\":\"earthImage_imageHolder__2pPS5\",\"image\":\"earthImage_image__1GrVg\",\"imageDate\":\"earthImage_imageDate__-Rr83\",\"params\":\"earthImage_params__21X-8\",\"imagesArray\":\"earthImage_imagesArray__3pJit\",\"imagesItem\":\"earthImage_imagesItem__2KDMB\"};","import React from \"react\";\r\nimport s from '../../../helpers/formHelpers/formsStyles.module.css'\r\nimport {useDispatch} from \"react-redux\";\r\nimport * as yup from 'yup'\r\nimport {Formik} from \"formik\";\r\nimport {setEarthImageDate} from \"../../../reducers/earthImage\";\r\nimport {formButtonHelper, formInputHelper} from \"../../../helpers/formHelpers/formHelpers\";\r\nimport {dateToday} from \"../../../helpers/dateToday\";\r\n\r\nconst SetDateEarthImage = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const validationSchema = yup.object().shape({\r\n        selectedDate: yup\r\n            .string()\r\n            .required(`Date required`)\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{\r\n                    selectedDate: ``\r\n                }}\r\n                validateOnBlur\r\n                onSubmit={ (values, {resetForm}) => {\r\n                    dispatch(setEarthImageDate(values.selectedDate))\r\n                    resetForm({values: ``})\r\n                } }\r\n                validationSchema={validationSchema}\r\n            >\r\n                { ({values, touched, errors, handleSubmit, handleBlur, handleChange, isValid, dirty}) => (\r\n                    <form className={s.form}>\r\n                        <h3 className={s.title}>Set exact date</h3>\r\n                        <div className={s.inputsHolder}>\r\n                            {formInputHelper(s.formSubtitle, `Date`, touched.selectedDate, errors.selectedDate,\r\n                                s.input, `date`, `selectedDate`, dateToday, handleChange,\r\n                                handleBlur, values.selectedDate)}\r\n                        </div>\r\n\r\n                        {formButtonHelper(s.formButton, isValid, dirty, handleSubmit, `Show`)}\r\n                    </form>\r\n                ) }\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SetDateEarthImage","export const earthImageUrlHelper = (date, item) => {\r\n    const apiKey = `ZWGiTATMzPHjpsUJSj289aerwaSsLpikIiYBhaek`\r\n    const dateArray = date.split(`-`)\r\n    const splitedDate = {\r\n        year: dateArray[0],\r\n        month: dateArray[1],\r\n        date: dateArray[2],\r\n    }\r\n    return `https://api.nasa.gov/EPIC/archive/natural/${splitedDate.year}/${splitedDate.month}/${splitedDate.date}/png/${item}.png?api_key=${apiKey}`\r\n}","import React, {useEffect} from \"react\";\r\nimport s from './earthImage.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getEarthImage} from \"../../reducers/earthImage\";\r\nimport Preloader from \"../../helpers/preloaders/preloader\";\r\nimport SetDateEarthImage from \"./datePicker/setDateEarthImage\";\r\nimport {earthImageUrlHelper} from \"../../helpers/earthImageURLHelper\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst EarthImage = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const earthImage = useSelector(state => state.earthImage.earthImage)\r\n    const SelectedDate = useSelector(state => state.earthImage.date)\r\n    const searchStart = useSelector(state => state.library.searchStart)\r\n\r\n    useEffect(() => {\r\n        dispatch(getEarthImage(SelectedDate))\r\n    }, [dispatch, SelectedDate])\r\n\r\n\r\n\r\n    if(!earthImage) return <Preloader />\r\n\r\n    if(searchStart) return <Redirect to='/nasaLibrary'/>\r\n\r\n    return (\r\n        <div className={s.earthImage}>\r\n            <h2 className={s.title}>See Earth Photos from space</h2>\r\n            <SetDateEarthImage />\r\n            <div className={s.imagesArray}>\r\n                    {\r\n                        earthImage.map(e => <div key={e.identifier} className={s.imagesItem}>\r\n                            <div>\r\n                                <h3 className={s.imageDate}>Date: {e.date}</h3>\r\n                                <p className={s.params}>Latitude: {e.centroid_coordinates.lat}</p>\r\n                                <p className={s.params}>Longitude: {e.centroid_coordinates.lon}</p>\r\n                            </div>\r\n                            <div className={s.imageHolder}>\r\n                                <img className={s.image} src={earthImageUrlHelper(SelectedDate, e.image)}\r\n                                     alt=\"Not available, please change date\"/>\r\n                            </div>\r\n                        </div>)\r\n                    }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EarthImage","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"formsStyles_form__1hMsK\",\"title\":\"formsStyles_title__e7A-b\",\"inputsHolder\":\"formsStyles_inputsHolder__hCEcN\",\"formSubtitle\":\"formsStyles_formSubtitle__3vhyu\",\"inputHolder\":\"formsStyles_inputHolder__1JPnn\",\"input\":\"formsStyles_input__2PRtO\",\"inputSelect\":\"formsStyles_inputSelect__t1QWX\",\"option\":\"formsStyles_option__ac7AJ\",\"formButton\":\"formsStyles_formButton__2ENNh\",\"errors\":\"formsStyles_errors__3RGRv\"};","import React from \"react\";\r\nimport s from './formsStyles.module.css'\r\nimport { RiErrorWarningFill } from 'react-icons/ri'\r\n\r\nexport const formInputHelper = (titleClass, title, touched, errors,\r\n                            inputClass, type, name, max, handleChange, handleBlur, value) => {\r\n    return (\r\n        <div className={s.inputHolder}>\r\n            <p className={titleClass}>{title}</p>\r\n            <input className={inputClass}\r\n                   type={type}\r\n                   name={name}\r\n                   max={max}\r\n                   onChange={handleChange}\r\n                   onBlur={handleBlur}\r\n                   value={value}/>\r\n            {touched && errors &&\r\n            <div className={s.errors}><RiErrorWarningFill/>   {errors}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const formButtonHelper = (buttonClass, isValid, dirty, handleSubmit, text) => {\r\n    return (\r\n        <button className={buttonClass} disabled={!isValid && !dirty}\r\n                onClick={handleSubmit}>{text}</button>\r\n    )\r\n}"],"sourceRoot":""}