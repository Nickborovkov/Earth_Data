{"version":3,"sources":["helpers/formHelpers/formsStylesMedia.module.css","images/imagePlaceholder.jpg","components/apod/apod.module.css","components/apod/apodMedia.module.css","components/apod/datePickers/setDateAPOD.jsx","components/apod/datePickers/setIntervalAPOD.jsx","components/apod/apod.jsx"],"names":["module","exports","SetDateAPOD","dispatch","useDispatch","error","useSelector","state","errors","validationSchema","yup","shape","currentDate","required","initialValues","validateOnBlur","onSubmit","values","setCurrentDate","setNewError","touched","handleChange","handleBlur","handleSubmit","isValid","dirty","className","cn","s","form","m","title","inputsHolder","formInputHelper","formSubtitle","input","dateToday","formButtonHelper","formButton","errorCase","SetIntervalAPOD","startDate","endDate","setIntervalDates","Apod","apodArray","apod","intervalDateStart","intervalDateEnd","searchStart","library","useState","datePickerType","setDatePickerType","useEffect","getApod","getApodWithInterval","to","apodForm","apodButton","onClick","length","apodList","map","a","apodItem","apodTitle","apodImageHolder","apodImage","src","url","alt","onError","e","target","imagePlaceHolder","apodDate","date","apodExpTitle","apodExplanation","explanation"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,KAAO,iC,iCCDV,QAA0B,8C,oBCCzCD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,SAAW,uBAAuB,MAAQ,oBAAoB,SAAW,uBAAuB,UAAY,wBAAwB,gBAAkB,8BAA8B,UAAY,wBAAwB,SAAW,uBAAuB,aAAe,2BAA2B,gBAAkB,8BAA8B,SAAW,uBAAuB,WAAa,2B,oBCA/aD,EAAOC,QAAU,CAAC,SAAW,4BAA4B,MAAQ,yBAAyB,UAAY,6BAA6B,SAAW,4BAA4B,aAAe,gCAAgC,gBAAkB,qC,yNCoD5NC,EAzCK,WAEhB,IAAMC,EAAWC,cACXC,EAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,OAAOH,SAE1CI,EAAmBC,MAAaC,MAAM,CACxCC,YAAaF,MAERG,SAFQ,mBAKjB,OACI,8BACI,cAAC,IAAD,CACIC,cAAe,CACXF,YAAY,IAEhBG,gBAAc,EACdC,SAAW,SAACC,GACRd,EAASe,YAAeD,EAAOL,cAC/BT,EAASgB,YAAY,QAEzBV,iBAAkBA,EATtB,SAWK,gBAAEQ,EAAF,EAAEA,OAAQT,EAAV,EAAUA,OAAQY,EAAlB,EAAkBA,QAASC,EAA3B,EAA2BA,aAAcC,EAAzC,EAAyCA,WAAYC,EAArD,EAAqDA,aAAcC,EAAnE,EAAmEA,QAASC,EAA5E,EAA4EA,MAA5E,OACG,uBAAMC,UAAWC,IAAGC,IAAEC,KAAMC,IAAED,MAA9B,UACI,oBAAIH,UAAWE,IAAEG,MAAjB,4BACA,qBAAKL,UAAWE,IAAEI,aAAlB,SACKC,YAAgBL,IAAEM,aAAH,OAAyBd,EAAQR,YAC7CJ,EAAOI,YAAagB,IAAEO,MADV,kCACsDC,IAAWf,EAC7EC,EAAYL,EAAOL,eAE1ByB,YAAiBT,IAAEU,WAAYd,EAASC,EAAOF,EAA/B,QAChBlB,GAAS,oBAAIqB,UAAWE,IAAEW,UAAjB,wDCmBnBC,EAnDS,WAEpB,IAAMrC,EAAWC,cACXC,EAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,OAAOH,SAE1CI,EAAmBC,MAAaC,MAAM,CACxC8B,UAAW/B,MAENG,SAFM,uBAGX6B,QAAShC,MAEJG,SAFI,uBAKb,OACI,8BACI,cAAC,IAAD,CACIC,cAAe,CACX2B,UAAU,GACVC,QAAQ,IAEZ3B,gBAAc,EACdC,SAAW,SAACC,GACRd,EAASwC,YAAiB1B,EAAOwB,UAAWxB,EAAOyB,UACnDvC,EAASgB,YAAY,QAEzBV,iBAAkBA,EAVtB,SAYM,gBAAEQ,EAAF,EAAEA,OAAQT,EAAV,EAAUA,OAAQY,EAAlB,EAAkBA,QAASG,EAA3B,EAA2BA,aAAcD,EAAzC,EAAyCA,WAAYD,EAArD,EAAqDA,aAAcG,EAAnE,EAAmEA,QAASC,EAA5E,EAA4EA,MAA5E,OACE,uBAAMC,UAAWC,IAAGC,IAAEC,KAAMC,IAAED,MAA9B,UACI,oBAAIH,UAAWE,IAAEG,MAAjB,+BACA,sBAAKL,UAAWE,IAAEI,aAAlB,UAEKC,YAAgBL,IAAEM,aAAH,aAA+Bd,EAAQqB,UACnDjC,EAAOiC,UAAWb,IAAEO,MADR,gCACkDC,IAAWf,EACzEC,EAAYL,EAAOwB,WAEtBR,YAAgBL,IAAEM,aAAH,WAA6Bd,EAAQsB,QACjDlC,EAAOkC,QAASd,IAAEO,MADN,8BAC8CC,IAAWf,EACrEC,EAAYL,EAAOyB,YAG1BL,YAAiBT,IAAEU,WAAYd,EAASC,EAAOF,EAA/B,QAChBlB,GAAS,oBAAIqB,UAAWE,IAAEW,UAAjB,iE,gBCkCnBK,UA7EF,WAET,IAAMzC,EAAWC,cACXyC,EAAYvC,aAAY,SAAAC,GAAK,OAAIA,EAAMuC,KAAKD,aAC5CjC,EAAcN,aAAY,SAAAC,GAAK,OAAIA,EAAMuC,KAAKlC,eAC9CmC,EAAoBzC,aAAY,SAAAC,GAAK,OAAIA,EAAMuC,KAAKC,qBACpDC,EAAkB1C,aAAY,SAAAC,GAAK,OAAIA,EAAMuC,KAAKE,mBAClDC,EAAc3C,aAAY,SAAAC,GAAK,OAAIA,EAAM2C,QAAQD,eACjD5C,EAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,OAAOH,SAEhD,EAA4C8C,mBAAS,GAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAkBA,OAhBAC,qBAAU,WACgB,IAAnBF,GACCjD,EAASoD,YAAQ3C,MAEvB,CAACT,EAAUiD,EAAgBxC,IAE7B0C,qBAAU,WACgB,IAAnBF,GACCjD,EAASqD,YAAoBT,EAAkBC,MAErD,CAAC7C,EAAUiD,EAAgBL,EAAmBC,IAEhDM,qBAAU,WACNnD,EAASgB,YAAY,SACvB,CAAChB,IAEA8C,EAAoB,cAAC,IAAD,CAAUQ,GAAG,iBAGhC,sBAAK/B,UAAWE,IAAEkB,KAAlB,UACG,oBAAIpB,UAAWC,IAAGC,IAAEG,MAAOD,IAAEC,OAA7B,qCACC,sBAEA,gCACwB,IAAnBqB,GACD,sBAAK1B,UAAWE,IAAE8B,SAAlB,UACI,cAAC,EAAD,IACA,wBAAQhC,UAAWE,IAAE+B,WACbC,QAAU,WAAOP,EAAkB,IAD3C,gCAIgB,IAAnBD,GACD,sBAAK1B,UAAWE,IAAE8B,SAAlB,UACI,cAAC,EAAD,IACA,wBAAQhC,UAAWE,IAAE+B,WACbC,QAAU,WAAOP,EAAkB,IAD3C,qCAMc,IAArBR,EAAUgB,SAAiBxD,GAC5B,cAAC,IAAD,IAEsB,IAArBwC,EAAUgB,SAAiBxD,GAC5B,qBAAKqB,UAAWE,IAAEkC,SAAlB,SAEQjB,EAAUkB,KAAI,SAAAC,GAAC,OAAI,sBAAKtC,UAAWC,IAAGC,IAAEqC,SAAUnC,IAAEmC,UAAjC,UACf,oBAAIvC,UAAWC,IAAGC,IAAEsC,UAAWpC,IAAEoC,WAAjC,SAA8CF,EAAEjC,QAChD,qBAAKL,UAAWE,IAAEuC,gBAAlB,SACI,qBAAKzC,UAAWE,IAAEwC,UACbC,IAAKL,EAAEM,IACPC,IAAI,OACJC,QAAU,SAACC,GAAOA,EAAEC,OAAOL,IAAMM,SAE1C,oBAAGjD,UAAWC,IAAGC,IAAEgD,SAAU9C,IAAE8C,UAA/B,mBAAiDZ,EAAEa,QACnD,mBAAGnD,UAAWC,IAAGC,IAAEkD,aAAchD,IAAEgD,cAAnC,yBACA,mBAAGpD,UAAWC,IAAGC,IAAEmD,gBAAiBjD,IAAEiD,iBAAtC,SAAyDf,EAAEgB,aAAF,oBAVOhB,EAAEa","file":"static/js/4.e91a1009.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"formsStylesMedia_form__2kri3\"};","export default __webpack_public_path__ + \"static/media/imagePlaceholder.d121e487.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"apod\":\"apod_apod__Kk6Qy\",\"apodItem\":\"apod_apodItem__Bn6qY\",\"title\":\"apod_title__1BVpa\",\"apodList\":\"apod_apodList__Axpv1\",\"apodTitle\":\"apod_apodTitle__2Re3D\",\"apodImageHolder\":\"apod_apodImageHolder__2XMSh\",\"apodImage\":\"apod_apodImage__12l_6\",\"apodDate\":\"apod_apodDate__3EsWF\",\"apodExpTitle\":\"apod_apodExpTitle__2ybTk\",\"apodExplanation\":\"apod_apodExplanation__3wxwX\",\"apodForm\":\"apod_apodForm__3lOQQ\",\"apodButton\":\"apod_apodButton__3GbKY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"apodItem\":\"apodMedia_apodItem__2W46D\",\"title\":\"apodMedia_title__11yfX\",\"apodTitle\":\"apodMedia_apodTitle__G3dTC\",\"apodDate\":\"apodMedia_apodDate__3mCAn\",\"apodExpTitle\":\"apodMedia_apodExpTitle__2FGOk\",\"apodExplanation\":\"apodMedia_apodExplanation__30Gn_\"};","import React from \"react\";\r\nimport s from '../../../helpers/formHelpers/formsStyles.module.css'\r\nimport m from '../../../helpers/formHelpers/formsStylesMedia.module.css'\r\nimport cn from 'classnames'\r\nimport {Formik} from \"formik\";\r\nimport * as yup from 'yup'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setCurrentDate} from \"../../../reducers/apod\";\r\nimport {formButtonHelper, formInputHelper} from \"../../../helpers/formHelpers/formHelpers\";\r\nimport {dateToday} from \"../../../helpers/dateHelper/dateToday\";\r\nimport {setNewError} from \"../../../reducers/errors\";\r\n\r\nconst SetDateAPOD = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useSelector(state => state.errors.error)\r\n\r\n    const validationSchema = yup.object().shape({\r\n        currentDate: yup\r\n            .string()\r\n            .required(`Date required`)\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{\r\n                    currentDate: ``\r\n                }}\r\n                validateOnBlur\r\n                onSubmit={ (values) => {\r\n                    dispatch(setCurrentDate(values.currentDate))\r\n                    dispatch(setNewError(null))\r\n                } }\r\n                validationSchema={validationSchema}\r\n            >\r\n                {({values, errors, touched, handleChange, handleBlur, handleSubmit, isValid, dirty})=>(\r\n                    <form className={cn(s.form, m.form)}>\r\n                        <h3 className={s.title}>Set exact date</h3>\r\n                        <div className={s.inputsHolder}>\r\n                            {formInputHelper(s.formSubtitle, `Date`, touched.currentDate,\r\n                                errors.currentDate, s.input, `date`, `currentDate`, `1995-01-07`, dateToday, handleChange,\r\n                                handleBlur, values.currentDate)}\r\n                        </div>\r\n                        {formButtonHelper(s.formButton, isValid, dirty, handleSubmit, `Show`)}\r\n                        {error && <h3 className={s.errorCase}>Not available, please change date</h3>}\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SetDateAPOD","import React from \"react\";\r\nimport s from \"../../../helpers/formHelpers/formsStyles.module.css\";\r\nimport m from \"../../../helpers/formHelpers/formsStylesMedia.module.css\";\r\nimport cn from 'classnames'\r\nimport {Formik} from \"formik\";\r\nimport * as yup from 'yup'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setIntervalDates} from \"../../../reducers/apod\";\r\nimport {formButtonHelper, formInputHelper} from \"../../../helpers/formHelpers/formHelpers\";\r\nimport {dateToday} from \"../../../helpers/dateHelper/dateToday\";\r\nimport {setNewError} from \"../../../reducers/errors\";\r\n\r\n\r\nconst SetIntervalAPOD = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useSelector(state => state.errors.error)\r\n\r\n    const validationSchema = yup.object().shape({\r\n        startDate: yup\r\n            .string()\r\n            .required(`Start date required`),\r\n        endDate: yup\r\n            .string()\r\n            .required(`End date required`),\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{\r\n                    startDate: ``,\r\n                    endDate: ``,\r\n                }}\r\n                validateOnBlur\r\n                onSubmit={ (values) => {\r\n                    dispatch(setIntervalDates(values.startDate, values.endDate))\r\n                    dispatch(setNewError(null))\r\n                }}\r\n                validationSchema={validationSchema}\r\n            >\r\n                { ({values, errors, touched, handleSubmit, handleBlur, handleChange, isValid, dirty}) => (\r\n                    <form className={cn(s.form, m.form)}>\r\n                        <h3 className={s.title}>Set time interval</h3>\r\n                        <div className={s.inputsHolder}>\r\n\r\n                            {formInputHelper(s.formSubtitle, `Start date`, touched.startDate,\r\n                                errors.startDate, s.input, `date`, `startDate`, `1995-01-07`, dateToday, handleChange,\r\n                                handleBlur, values.startDate)}\r\n\r\n                            {formInputHelper(s.formSubtitle, `End date`, touched.endDate,\r\n                                errors.endDate, s.input, `date`, `endDate`, `1995-01-07`, dateToday, handleChange,\r\n                                handleBlur, values.endDate)}\r\n\r\n                        </div>\r\n                        {formButtonHelper(s.formButton, isValid, dirty, handleSubmit, `Show`)}\r\n                        {error && <h3 className={s.errorCase}>Not available, please change date interval</h3>}\r\n                    </form>\r\n                ) }\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SetIntervalAPOD","import React, {useEffect, useState} from \"react\";\r\nimport s from './apod.module.css'\r\nimport m from './apodMedia.module.css'\r\nimport cn from 'classnames'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getApod, getApodWithInterval} from \"../../reducers/apod\";\r\nimport Preloader from \"../../helpers/preloaders/preloader\";\r\nimport SetDateAPOD from \"./datePickers/setDateAPOD\";\r\nimport SetIntervalAPOD from \"./datePickers/setIntervalAPOD\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {setNewError} from \"../../reducers/errors\";\r\nimport imagePlaceHolder from '../../images/imagePlaceholder.jpg'\r\n\r\nconst Apod = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const apodArray = useSelector(state => state.apod.apodArray)\r\n    const currentDate = useSelector(state => state.apod.currentDate)\r\n    const intervalDateStart = useSelector(state => state.apod.intervalDateStart)\r\n    const intervalDateEnd = useSelector(state => state.apod.intervalDateEnd)\r\n    const searchStart = useSelector(state => state.library.searchStart)\r\n    const error = useSelector(state => state.errors.error)\r\n\r\n    const [datePickerType, setDatePickerType] = useState(0)\r\n\r\n    useEffect(()=>{\r\n        if(datePickerType === 0){\r\n            dispatch(getApod(currentDate))\r\n        }\r\n    },[dispatch, datePickerType, currentDate])\r\n\r\n    useEffect(()=>{\r\n        if(datePickerType === 1){\r\n            dispatch(getApodWithInterval(intervalDateStart,intervalDateEnd))\r\n        }\r\n    },[dispatch, datePickerType, intervalDateStart, intervalDateEnd])\r\n\r\n    useEffect(()=>{\r\n        dispatch(setNewError(null))\r\n    },[dispatch])\r\n\r\n    if(searchStart) return <Redirect to='/nasaLibrary'/>\r\n\r\n    return (\r\n        <div className={s.apod}>\r\n           <h2 className={cn(s.title, m.title)}>NASA Picture Of The Day</h2>\r\n            <p></p>\r\n\r\n            <div>\r\n                {datePickerType === 0 &&\r\n                <div className={s.apodForm}>\r\n                    <SetDateAPOD />\r\n                    <button className={s.apodButton}\r\n                            onClick={ () => {setDatePickerType(1)} }>Choose interval</button>\r\n                </div>}\r\n\r\n                {datePickerType === 1 &&\r\n                <div className={s.apodForm}>\r\n                    <SetIntervalAPOD />\r\n                    <button className={s.apodButton}\r\n                            onClick={ () => {setDatePickerType(0)} }>Choose exact date</button>\r\n                </div>}\r\n            </div>\r\n\r\n\r\n            {apodArray.length === 0 && !error &&\r\n            <Preloader/>}\r\n\r\n            {apodArray.length !== 0 && !error &&\r\n            <div className={s.apodList}>\r\n                {\r\n                    apodArray.map(a => <div className={cn(s.apodItem, m.apodItem)} key={a.date}>\r\n                        <h3 className={cn(s.apodTitle, m.apodTitle)}>{a.title}</h3>\r\n                        <div className={s.apodImageHolder}>\r\n                            <img className={s.apodImage}\r\n                                 src={a.url}\r\n                                 alt=\"apod\"\r\n                                 onError={ (e) => {e.target.src = imagePlaceHolder}}/>\r\n                        </div>\r\n                        <p className={cn(s.apodDate, m.apodDate)}>Date: {a.date}</p>\r\n                        <p className={cn(s.apodExpTitle, m.apodExpTitle)}>Explanation</p>\r\n                        <p className={cn(s.apodExplanation, m.apodExplanation)}>{a.explanation || `Not available`}</p>\r\n                    </div>)\r\n                }\r\n            </div>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Apod"],"sourceRoot":""}