{"version":3,"sources":["helpers/formHelpers/formsStylesMedia.module.css","images/imagePlaceholder.jpg","components/earth/earth.module.css","components/earth/earthMedia.module.css","components/earth/parametersPicker/parametersPicker.jsx","components/earth/earth.jsx"],"names":["module","exports","ParametersPicker","dispatch","useDispatch","error","useSelector","state","errors","validationSchema","yup","shape","longitude","required","typeError","min","max","latitude","initialValues","validateOnBlur","onSubmit","values","setParameters","date","dimensions","setNewError","touched","handleSubmit","handleChange","handleBlur","isValid","dirty","className","cn","s","form","m","title","inputsHolder","formInputHelper","formSubtitle","input","formButtonHelper","formButton","errorCase","Earth","earthObs","earth","earthObservation","searchStart","library","useEffect","getEarthObservation","to","result","earthParams","id","imageHolder","image","src","url","alt","onError","e","target","imagePlaceHolder"],"mappings":"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","file":"static/js/6.e59677db.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"formsStylesMedia_form__2kri3\"};","export default __webpack_public_path__ + \"static/media/imagePlaceholder.d121e487.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"earth\":\"earth_earth__B6t3B\",\"title\":\"earth_title__3SZmo\",\"imageHolder\":\"earth_imageHolder__2ET7U\",\"image\":\"earth_image__10a1r\",\"earthParams\":\"earth_earthParams__2od4F\",\"result\":\"earth_result__2BzLZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"result\":\"earthMedia_result__2XJ79\",\"title\":\"earthMedia_title__2VMG9\"};","import React from \"react\";\r\nimport s from '../../../helpers/formHelpers/formsStyles.module.css'\r\nimport m from '../../../helpers/formHelpers/formsStylesMedia.module.css'\r\nimport cn from 'classnames'\r\nimport {Formik} from \"formik\";\r\nimport * as yup from 'yup'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setParameters} from \"../../../reducers/earth\";\r\nimport {\r\n    formButtonHelper,\r\n    formInputHelper\r\n} from \"../../../helpers/formHelpers/formHelpers\";\r\nimport {setNewError} from \"../../../reducers/errors\";\r\n\r\nconst ParametersPicker = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useSelector(state => state.errors.error)\r\n\r\n    const validationSchema = yup.object().shape({\r\n        longitude: yup\r\n            .number()\r\n            .required(`Longitude required`)\r\n            .typeError(`Only numbers`)\r\n            .min(-180, `Enter longitude from -180 to 180`)\r\n            .max(180, `Enter longitude from -180 to 180`),\r\n        latitude: yup\r\n            .number()\r\n            .required(`Latitude required`)\r\n            .typeError(`Only numbers`)\r\n            .min(-90, `Enter latitude from -90 to 90`)\r\n            .max(90, `Enter latitude from -90 to 90`),\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{\r\n                    longitude: ``,\r\n                    latitude: ``,\r\n                }}\r\n                validateOnBlur\r\n                onSubmit={ (values) => {\r\n                    dispatch(setParameters(values.longitude, values.latitude ,values.date ,values.dimensions))\r\n                    dispatch(setNewError(null))\r\n                } }\r\n                validationSchema={validationSchema}\r\n            >\r\n                { ({values, errors, touched, handleSubmit, handleChange, handleBlur, isValid, dirty}) => (\r\n                    <form className={cn(s.form, m.form)}>\r\n                        <h3 className={s.title}>Set new parameters</h3>\r\n                        <div className={s.inputsHolder}>\r\n                            {formInputHelper(s.formSubtitle, `Longitude`, touched.longitude,\r\n                                errors.longitude, s.input, `text`, `longitude`, null, null, handleChange,\r\n                                handleBlur, values.longitude)}\r\n\r\n                            {formInputHelper(s.formSubtitle, `Latitude`, touched.latitude,\r\n                                errors.latitude, s.input, `text`, `latitude`, null, null, handleChange,\r\n                                handleBlur, values.latitude)}\r\n\r\n                        </div>\r\n\r\n                        {formButtonHelper(s.formButton, isValid, dirty, handleSubmit, `Show`)}\r\n                        {error && <h3 className={s.errorCase}>Not available, please change parameters</h3>}\r\n                    </form>\r\n                ) }\r\n            </Formik>\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default ParametersPicker","import React, {useEffect} from \"react\";\r\nimport s from './earth.module.css'\r\nimport m from './earthMedia.module.css'\r\nimport cn from 'classnames'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getEarthObservation} from \"../../reducers/earth\";\r\nimport Preloader from \"../../helpers/preloaders/preloader\";\r\nimport ParametersPicker from \"./parametersPicker/parametersPicker\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {setNewError} from \"../../reducers/errors\";\r\nimport imagePlaceHolder from \"../../images/imagePlaceholder.jpg\";\r\n\r\nconst Earth = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const earthObs = useSelector(state => state.earth.earthObservation)\r\n    const longitude = useSelector(state => state.earth.longitude)\r\n    const latitude = useSelector(state => state.earth.latitude)\r\n    const searchStart = useSelector(state => state.library.searchStart)\r\n    const error = useSelector(state => state.errors.error)\r\n\r\n\r\n    useEffect(()=>{\r\n        dispatch(getEarthObservation(longitude, latitude))\r\n    },[dispatch, longitude, latitude])\r\n\r\n    useEffect(()=>{\r\n       dispatch(setNewError(null))\r\n    },[dispatch])\r\n\r\n    if(searchStart) return <Redirect to='/nasaLibrary'/>\r\n\r\n    return (\r\n        <div className={s.earth}>\r\n            <h2 className={cn(s.title, m.title)}>NASA Landsat Satellite Imagery Data</h2>\r\n            <ParametersPicker />\r\n\r\n\r\n            {!earthObs && !error &&\r\n            <Preloader/>}\r\n\r\n            {earthObs && !error &&\r\n            <div className={cn(s.result, m.result)}>\r\n                <p className={s.earthParams}>ID: {earthObs.id}</p>\r\n                <p className={s.earthParams}>Date: {earthObs.date}</p>\r\n                <div className={s.imageHolder}>\r\n                    <img className={s.image}\r\n                         src={earthObs.url}\r\n                         alt=\"earthObs\"\r\n                         onError={ (e) => {e.target.src = imagePlaceHolder}}/>\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Earth"],"sourceRoot":""}